/*	A basic extension of the java.applet.Applet class */import java.awt.*;import java.applet.*;import java.net.*;public class drsapp extends Applet implements java.awt.event.MouseListener{    drsconn DC;    jscriptstream js;    int nbits=12;    int plottype=-1;    int style=0;    Image offScreenBuffer;    int[] paras=new int[8];    java.awt.List paraList;    java.awt.TextField[] paravalField;    java.awt.TextField[] paraivalField;    java.awt.Checkbox[] parabits;    java.awt.Checkbox plotall;    int plotheight,plotwidth,height,width;    slistitem lslistitem;    Color[] cols={Color.black,Color.red,Color.green,Color.blue,            Color.magenta,Color.cyan,Color.orange,Color.pink,Color.yellow};    boolean running=false;    paralist pl;    boolean drawnboxes=false;    int factor;    public String longstring="";    public String shortstring="";    	public void init()	{		// Take out this line if you don't use symantec.itools.net.RelativeURL or symantec.itools.awt.util.StatusScroller		//symantec.itools.lang.Context.setApplet(this);			// This code is automatically generated by Visual Cafe when you add		// components to the visual environment. It instantiates and initializes		// the components. To modify the code, only use code syntax that matches		// what Visual Cafe can generate, or Visual Cafe may be unable to back		// parse your Java file into its visual environment.		//{{INIT_CONTROLS		setLayout(null);		setBackground(java.awt.Color.white);		setSize(670,600);		//}}		plotheight=350;		plotwidth=400;		factor=50000/plotwidth;	    setup();	    addMouseListener(this);		//{{REGISTER_LISTENERS		//}}	}		//{{DECLARE_CONTROLS	//}}		java.awt.Choice bitchoice = new java.awt.Choice();	java.awt.Choice timechoice = new java.awt.Choice();	java.awt.Choice stylechoice = new java.awt.Choice();	java.awt.Button gobutton = new java.awt.Button();	java.awt.Button freezebutton = new java.awt.Button();	java.awt.Button clearbutton = new java.awt.Button();	java.awt.Button textbutton = new java.awt.Button();//	java.awt.Button printbutton = new java.awt.Button();	java.awt.Label labl1 = new java.awt.Label();	java.awt.Label labl2 = new java.awt.Label();	java.awt.CheckboxGroup Group1 = new java.awt.CheckboxGroup();		public void setup(){	    		setFont(new Font("Times", Font.PLAIN, plotwidth/40));		plotall=new Checkbox("All at",Group1,false);		add(plotall);		plotall.setBounds(plotwidth+1900/factor,plotheight-1000/factor,5800/factor,2400/factor);		for(int i=4;i<17;i++){		    bitchoice.addItem(Integer.toString(i));		}		add(bitchoice);		bitchoice.setBounds(plotwidth+7700/factor,plotheight-1000/factor,5000/factor,2400/factor);		labl1.setText("bits");		add(labl1);		labl1.setBounds(plotwidth+12700/factor,plotheight-1000/factor,4800/factor,2400/factor);		stylechoice.addItem("Line");		stylechoice.addItem("Dashes");		add(stylechoice);		stylechoice.setBounds(plotwidth+5200/factor,6000/factor,6000/factor,2400/factor);					timechoice.addItem("10");		timechoice.addItem("20");		timechoice.addItem("30");		timechoice.addItem("40");		timechoice.addItem("50");		timechoice.addItem("60");		timechoice.addItem("120");		timechoice.addItem("180");		timechoice.addItem("240");		add(timechoice);		timechoice.setBounds(plotwidth+5200/factor,10000/factor,6000/factor,2400/factor);		labl2.setText("secs");		add(labl2);		labl2.setBounds(plotwidth+11200/factor,10000/factor,3600/factor,2400/factor);		gobutton.setLabel("GO");		add(gobutton);		gobutton.setBackground(java.awt.Color.green);		gobutton.setBounds(plotwidth+5200/factor,13000/factor,3600/factor,2400/factor);		freezebutton.setLabel("Freeze");		add(freezebutton);		freezebutton.setBackground(java.awt.Color.cyan);		freezebutton.setBounds(plotwidth+8800/factor,13000/factor,6000/factor,2400/factor);				clearbutton.setLabel("Clear");		add(clearbutton);		clearbutton.setBackground(java.awt.Color.white);		clearbutton.setBounds(plotwidth+5200/factor,16000/factor,6000/factor,2400/factor);		//		printbutton.setLabel("Print");//		add(printbutton);//		printbutton.setBackground(java.awt.Color.white);//		printbutton.setBounds(plotwidth+5200/factor,20000/factor,6000/factor,2400/factor);				textbutton.setLabel("Text Dump");		add(textbutton);		textbutton.setBackground(Color.lightGray);		textbutton.setBounds(plotwidth+5200/factor,23000/factor,7000/factor,2400/factor);				paravalField=new TextField[paras.length];		paraivalField=new TextField[paras.length];		paraList=new List();		parabits=new Checkbox[paras.length];		sitem lsitem = new sitem();		lslistitem=new slistitem();		sraditem lraditem= new sraditem();		bitchoice.addItemListener(lraditem);		timechoice.addItemListener(lsitem);		plotall.addItemListener(lraditem);		stylechoice.addItemListener(lraditem);		int x1=0;		int y1=3000/factor;		try{		    pl=new paralist();		    pl.Addpara(0,"Choose para"," "," ");		    pl.Addparas(new URL(getCodeBase(),"DRS_NAMES.TXT"),0,5,13,17,29,100,"DRS");		}catch(Exception e){}		pl.makelist(paraList);		add(paraList);		paraList.setMultipleMode(true);		paraList.setBounds(x1+40000/factor,plotheight+y1,21000/factor,9600/factor);        paraList.addItemListener(lslistitem);        x1=100/factor;		for(int i=0;i<paras.length;i++){		  parabits[i]=new Checkbox("",Group1,false);		  parabits[i].setBounds(x1,plotheight+y1,9000/factor,2400/factor);		  add(parabits[i]);		  parabits[i].addItemListener(lraditem);	      paravalField[i] = new TextField();          paravalField[i].setEditable(false);		  add(paravalField[i]);		  paravalField[i].setBounds(x1+10000/factor,plotheight+y1,4000/factor,2400/factor);          paravalField[i].setForeground(cols[i]);          paravalField[i].setBackground(Color.white);	      paraivalField[i] = new TextField();		  add(paraivalField[i]);		  paraivalField[i].setBounds(x1+14000/factor,plotheight+y1,5000/factor,2400/factor);          paraivalField[i].setForeground(cols[i]);          paraivalField[i].setEditable(false);          y1+=2000/factor;          if(y1>10000/factor){            y1=3000/factor;            x1+=20000/factor;          }		}		saction lsaction = new saction();		gobutton.addActionListener(lsaction);		freezebutton.addActionListener(lsaction);		clearbutton.addActionListener(lsaction);//		printbutton.addActionListener(lsaction);		textbutton.addActionListener(lsaction);        freezebutton.setEnabled(false);		try{		    		    js=new jscriptstream("drs.data",this);		    System.out.println(js.obj);		    if(js.length==0)throw new Exception("No data");		    System.out.println("Got some data");		    DC=new drsconn();		    nbits=js.readint();		    plottype=js.readint();		    style=js.readint();		    for(int i=0;i<paras.length;i++){		        paras[i]=js.readint();		    }		    DC.pind=js.readint();		    DC.datalength=js.readint();		    System.out.println("length "+DC.datalength);		    DC.setarrays(paras);		    DC.readfreq(js);		    for(int i=0;i<DC.datalength;i++){		        DC.times[i]=js.readint();		        for(int j=0;j<DC.ind;j++){		            DC.data[j][i]=js.readshort();		        }		    }		  }catch(Exception e){		    System.out.println(e);		    try{		      DC=new drsconn(this);			      DC.datalength=20;		      DC.startit(paras);		      		      running=true;		    }catch(Exception f){		        System.out.println(f);		    }		  }		  bitchoice.select(nbits-4);		  timechoice.select((new StringBuffer().append(DC.datalength)).toString());	      for(int i=0;i<paras.length;i++){	        if(paras[i]!=0){	            paraList.select(pl.getIndex(paras[i]));	            parabits[i].setLabel(pl.shortString(pl.getIndex(paras[i])));	        }	      }	      setseltype(plottype);	      stylechoice.select(style);	      System.out.println("Setup finished");	}			public void update(Graphics g)    {    Graphics gr;     // Will hold the graphics context from the offScreenBuffer.    // We need to make sure we keep our offscreen buffer the same size    // as the graphics context we're working with. if (offScreenBuffer==null ||                (! (offScreenBuffer.getWidth(this) == this.getSize().width                && offScreenBuffer.getHeight(this) == this.getSize().height)))        {        offScreenBuffer = this.createImage(getSize().width, getSize().height);        }    // We need to use our buffer Image as a Graphics object:    gr = offScreenBuffer.getGraphics();    paint(gr); // Passes our off-screen buffer to our paint method, which,               // unsuspecting, paints on it just as it would on the Graphics               // passed by the browser or applet viewer.    g.drawImage(offScreenBuffer, 0, 0, this);               // And now we transfer the info in the buffer onto the               // graphics context we got from the browser in one smooth motion.    }		public void paint(Graphics g){	    synchronized(this){	     g.setPaintMode();	     g.setColor(Color.white);	     g.fillRect(0,0,plotwidth+5000/factor,plotheight+5000/factor);	     g.setColor(Color.black);	     g.drawRect(0,0,plotwidth,plotheight+1);	     int x1=((DC.pind)*plotwidth)/DC.datalength;	     int t1=DC.pind-1;	     if(t1<0)t1+=DC.datalength;	    	     if(plottype==-1){	        normalplot(g);	     }else{	        bitplot(g);	     }	    	     g.setColor(Color.orange);	     g.drawLine(x1,0,x1,plotheight);	     if(DC.times.length>0)g.drawString(gmt(DC.times[t1]+1),x1,plotheight+2500/factor);	     String sb1;	     String sb2;	     int i=-1;	     for(int ix=0;ix<paras.length;ix++){	       sb1="N/A";	       sb2="N/A";	       if(paras[ix]!=0){	         i++;	         if(DC.freq[i]>0){	           sb1=Integer.toString(DC.ival(DC.index[i],t1,nbits));//	           sb2=Integer.toString((int)DC.data[DC.index[i]][t1]);	           sb2=Integer.toString(DC.ival(DC.index[i],t1,(int)16));	         }	       }	       paravalField[ix].setText(sb1);	       paraivalField[ix].setText(sb2);	     }	    }	}			public void normalplot(Graphics g){	    float m=1;	    int y0=(2<<(nbits-1))-1;	    m=(float)plotheight/(float)y0;	    g.setColor(Color.lightGray);	    g.drawString((new StringBuffer().append(y0)).toString(),plotwidth+5,10);	    y0=(2<<(nbits-4));	    for(int y1=0;y1<8;y1++){	      int y=plotheight-(int)(m*DC.ival((short)(y1*y0),nbits));	      if(y1!=8)g.drawLine(0,y,plotwidth,y);	      g.drawString((new StringBuffer().append(y1*y0)).toString(),plotwidth+5,y);	    }	    if(DC.np>0){	    int[] lastx=new int[DC.np];	    int[] lasty=new int[DC.np];	    for(int i=0;i<DC.datalength;i++){	        drawtimes(g,i);	        int j=0;	        for(int jx=0;jx<paras.length;jx++){	          if(paras[jx]!=0){	          g.setColor(cols[jx]);	          int nind=DC.index[j];	          float freq=DC.freq[j];	          for(int f=0;f<freq;f++){	            int y=plotheight-(int)(m*DC.ival(nind+f,i,nbits));	            int x=(int)((plotwidth*(i*freq+f))/(freq*DC.datalength)); 	              if((i==0)&&(f==0)){ 	                lasty[j]=plotheight-(int)(m*DC.ival(nind+(int)freq-1,DC.datalength-1,nbits));                    lastx[j]=plotwidth-(int)(plotwidth/(freq*DC.datalength)); 	              }//	            if(((i==0)||((i)==DC.pind))&&(f==0)){//	                g.drawLine(x,y,x,y);//	            }else{	                if(style==0){	                  if(((i==0)||(i==DC.pind))&&(f==0)){	                    g.drawLine(x,y,x,y);	                  }else{	                    g.drawLine(lastx[j],lasty[j],x,y);	                  }	                }else{	                  g.drawLine(lastx[j],lasty[j],	                  lastx[j]+(int)(plotwidth/(freq*DC.datalength)),lasty[j]);	                }//	            }	            lastx[j]=x;	            lasty[j]=y;	          }	            j++;              }            }	    }	}	}	    	public void bitplot(Graphics g){	    int[] lastx=new int[16];	    int[] lasty=new int[16];	    float m=(float)plotheight/(float)16;	    g.setColor(Color.lightGray);	    for(int i=0;i<16;i++){	      int y=plotheight-(int)(m*i);	      g.drawLine(0,y,plotwidth,y);	      g.drawString((new StringBuffer().append(i)).toString(),plotwidth+5,y);	    }	    int jx=paras[plottype];	    int j=-1;	    if(jx>0){	        for(jx=0;jx<=plottype;jx++){	            if(paras[jx]>0){	                j++;	            }	        }	        int nind=DC.index[j];	        float freq=DC.freq[j];    	    for(int i=0;i<DC.datalength;i++){	          drawtimes(g,i);	          g.setColor(cols[plottype]);	          for(int f=0;f<freq;f++){	            int bit=1;	            for(int b=0;b<16;b++){	              int y=plotheight-(int)(m*b); 	              if((i==0)&&(f==0)){ 	                lasty[b]=y; 	                if(((int)DC.data[nind+(int)freq-1][DC.datalength-1]&bit)!=0)lasty[b]-=m/2;                    lastx[b]=plotwidth-(int)(plotwidth/(freq*DC.datalength)); 	              }	              if(((int)DC.data[nind+f][i]&bit)!=0)y-=m/2; 	              int x=(int)((plotwidth*(i*freq+f))/(freq*DC.datalength));	                if(style==0){	                  g.drawLine(lastx[b],lasty[b],	      lastx[b]+(int)(plotwidth/(freq*DC.datalength)),lasty[b]);	                  g.drawLine(x,lasty[b],x,y);	                }else{	                  g.drawLine(lastx[b],lasty[b],	      lastx[b]+(int)(plotwidth/(freq*DC.datalength)),lasty[b]);	                }	            lastx[b]=x;	            lasty[b]=y;	            bit=bit<<1;	            }	          }            }	         }	}		public void drawtimes(Graphics g,int i){	    	g.setColor(Color.black);	        int div=DC.datalength/5;	        if(div==0)div=1;	        int xt=(plotwidth*i)/DC.datalength;	        g.drawLine(xt,plotheight,xt,plotheight-500/factor);	        if(((i/div)*div)==i){	            g.drawString(gmt(DC.times[i]),xt,plotheight+1500/factor);	            g.setColor(Color.lightGray);	            g.drawLine(xt,plotheight,xt,0);	            g.setColor(Color.black);	            g.drawLine(xt,plotheight,xt,plotheight-1000/factor);	        }    }    	public void print(Graphics g){	    System.out.println("Printing");	    paint(g);	    	    	    	}		public int getseltype(){	    int ans=-1;	    if(!plotall.getState()){	        for(int i=0;i<paras.length;i++){	            if(parabits[i].getState())ans=i;	        }	    }	    return ans;	}		public void setseltype(int a){	    if(a<0){	        plotall.setState(true);	    }else{	        parabits[a].setState(true);	    }	}		public String gmt(int t){    String ans;    int h=t/3600;    int s=(t-h*3600);    int m=s/60;    s=s-m*60;    ans=lead0(h,2)+":"+lead0(m,2)+":"+lead0(s,2);    return ans;  }    private String lead0(int a,int n){    StringBuffer ans=new StringBuffer();    ans.append(a);    while(ans.length()<n)ans.insert(0,"0");    return ans.toString();  }	    		public void savedata(){		  try{		    //		    if(js==null)js=new jscriptstream("drs.data",this);		    js.writeint(nbits);		    js.writeint(plottype);		    js.writeint(style);		    js.writeint(paras);		    js.writeint(DC.pind);		    js.writeint(DC.datalength);		    js.writeshort(DC.freq);		    for(int i=0;i<DC.datalength;i++){		        js.writeint(DC.times[i]);		        for(int j=0;j<DC.ind;j++){		            js.writeshort(DC.data[j][i]);		        }		    }		    js.flush();		  }catch(Exception e){		    System.out.println("save data failed:"+e);		  }	}		public void stop(){	    if(DC!=null){	        try{		    DC.stop();	        }catch(Exception e){}	        DC=null;	        	    }	    super.stop();	}	                public void destroy(){           stop();           super.destroy();        }	class slistitem implements java.awt.event.ItemListener	{	    boolean changeable=true;	    		public void itemStateChanged(java.awt.event.ItemEvent event)		{		int[] xx=paraList.getSelectedIndexes();		if(!changeable){		  for(int i=0;i<xx.length;i++){		    paraList.deselect(xx[i]);		  }		}else{		clearplot();    		int indq=((Integer)event.getItem()).intValue();		if(xx.length>paras.length)paraList.deselect(indq);		xx=paraList.getSelectedIndexes();		for(int i=paras.length;i<xx.length;i++){		  paraList.deselect(xx[i]);		}		xx=paraList.getSelectedIndexes();		for(int i=0;i<paras.length;i++){		  if(i<xx.length){		    if(xx[i]==0){		         paraList.deselect(0);		        }else{		         parabits[i].setLabel(pl.shortString(xx[i]));		        }		  }else{		    parabits[i].setLabel("");		  }		}		}		}	}	class sitem implements java.awt.event.ItemListener	{		public void itemStateChanged(java.awt.event.ItemEvent event)		{			Object object = event.getSource();			freeze();		}	}		class sraditem implements java.awt.event.ItemListener	{		public void itemStateChanged(java.awt.event.ItemEvent event)		{		    if(event.getSource()==(Object)bitchoice){		        plotall.setState(true);		    }			plottype=getseltype();			style=stylechoice.getSelectedIndex();		    nbits=Integer.parseInt(bitchoice.getSelectedItem());		    if(!running)repaint();		}	}					 	class saction implements java.awt.event.ActionListener	{		public void actionPerformed(java.awt.event.ActionEvent event)		{			Object object = event.getSource();			if (object == gobutton)				go();			if (object == freezebutton)				freeze();			if (object == clearbutton)				clear();//			if (object == printbutton)//				printit();			if (object == textbutton)				opentext();		}	}	void go()	{		// to do: code goes here.		    try{		        System.out.println("Stopping");		        System.out.println(DC);		      DC.stop();		      running=false;		        System.out.println("Create new");		      DC=new drsconn(this);		        System.out.println("Set up");		      DC.datalength=Integer.parseInt(timechoice.getSelectedItem());		      int[] xx=paraList.getSelectedIndexes();		      for(int i=0;i<paras.length;i++){		        if(i<xx.length){		          paras[i]=pl.getNumber(xx[i]);		          paraList.deselect(xx[i]);		        }else{		          paras[i]=0;		        }		        System.out.println(paras[i]);		      }		      System.out.println("Startit");		      		      DC.startit(paras);		      lslistitem.changeable=false;		      running=true;              freezebutton.setEnabled(true);              gobutton.setEnabled(false);		    }catch(Exception f){		      System.out.println(f);  		        }		}			 	void freeze()	{		// to do: code goes here.		    for(int i=0;i<paras.length;i++){		        if(paras[i]!=0){		            paraList.select(pl.getIndex(paras[i]));		        }		    }		    lslistitem.changeable=true;		    try{		        System.out.println("Stopping");		        System.out.println(DC);		      DC.stop();		      running=false;		      savedata();		      repaint();              freezebutton.setEnabled(false);              gobutton.setEnabled(true);		    }catch(Exception f){		      System.out.println(f);  		        }			 	}		void clearplot(){       for(int i=0;i<DC.np;i++){        DC.freq[i]=0;        DC.paras[i]=0;       }       DC.np=0;       repaint();}void clear(){                 freeze();		      for(int i=0;i<paras.length;i++){		        parabits[i].setLabel("");		        paras[i]=0;		      }		      clearplot();		      int[] xx=paraList.getSelectedIndexes();		      for(int i=0;i<xx.length;i++){		          paraList.deselect(xx[i]);		      }}       void printit(){        savedata();	    try{		netscape.javascript.JSObject win=netscape.javascript.JSObject.getWindow(this);		win.call("printit",null);		}catch(Exception e){}			 	}		void opentext(){  	      try{		   netscape.javascript.JSObject win=netscape.javascript.JSObject.getWindow(this);           win.eval("maketextwindow('');");          }catch(Exception e){}          writetitle();    }    	void writetext(StringBuffer[] sb,int n){  	      try{		   netscape.javascript.JSObject win=netscape.javascript.JSObject.getWindow(this);           for(int i=0;i<n;i++){               shortstring=sb[i]+"\n"+shortstring;               longstring=sb[i]+"\n"+longstring;               //             win.eval("writetextwindow('"+sb[i]+"');");           }           if(shortstring.length()>4160)shortstring=shortstring.substring(0,4160);           if(longstring.length()>250000)longstring=longstring.substring(0,250000);           win.eval("displaytext();");          }catch(Exception e){            System.out.println(e);            }    }            	void writetitle(){  	      try{		   netscape.javascript.JSObject win=netscape.javascript.JSObject.getWindow(this);           StringBuffer tit=new StringBuffer("Time     ");           for(int i=0;i<DC.np;i++){             int pap=pl.getIndex(DC.paras[i]);             tit.append(pl.getShortname(pap)).append("   ");           }           System.out.println(tit);             win.eval("writetexttitle('"+tit+"');");          }catch(Exception e){}    }    	public void mouseClicked(java.awt.event.MouseEvent event)	{			Object object = event.getSource();			int nclicks=((java.awt.event.MouseEvent)event).getClickCount();            int y1=event.getY();            int x1=event.getX();			if((plottype==-1)&&(x1<plotwidth)&&(y1<plotheight)){			  int i=bitchoice.getSelectedIndex();			                if(event.getModifiers()==event.BUTTON1_MASK){                if(nclicks==2)i--;              }else{                i++;              }              if((i>=0)&&(i<bitchoice.getItemCount())){                bitchoice.select(i);                nbits=Integer.parseInt(bitchoice.getSelectedItem());               }            }		    repaint();	}	public void mousePressed(java.awt.event.MouseEvent event)	{	}	public void mouseReleased(java.awt.event.MouseEvent event)	{	}	public void mouseEntered(java.awt.event.MouseEvent event)	{	}	public void mouseExited(java.awt.event.MouseEvent event)	{	}    }