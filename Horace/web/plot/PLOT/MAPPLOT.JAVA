import java.awt.*;import java.util.*;import java.io.*;import java.net.*;/** * Reads in map data and draws track plot. *  * @author Dave Tiddeman * @version 1.0 */public class mapplot extends zoomplot  implements java.awt.event.ItemListener{        /**         * Horace connection         */        // The following function is a placeholder for control initialization.        // You should call this function from a constructor or initialization function.            /**     * Map data     */    Vector bitsofLand;    String mapdata;    float[] maprange=new float[4];    float[][] planeshape={{0,8},{1,5},{4,3},                          {1,3},{1,1},{2,0},                          {-2,0},{-1,1},{-1,3},                          {-4,3},{-1,5},{0,8}};    Checkbox checkplane;    int[][] oldplane=null;    boolean dodrawplane=false;    /**     * Previous status of the map data     */    public byte prevq=0;   /**    * Creates a new track plot    */       mapplot(){    super(180,-180,90,-90);                   //{{INIT_CONTROLS                setSize(0,0);                //}}        }      mapplot(String mapd){    this();    mapdata=mapd;   }     /**     * Initialize track plot and start reading data.     */    public void init()    {        // This method is derived from class zoomplot        // to do: code goes here     System.out.println("init map");       readmap(mapdata);     setDatamaxmin(maprange[2]/100,maprange[0]/100,                     maprange[3]/100,maprange[1]/100);     setBackground(Color.white);     prevq=q.mapstatus;     System.out.println("prevq "+prevq);     setmaxmin(maprange[2]/100,maprange[0]/100,                     maprange[3]/100,maprange[1]/100);     plotapp pq=(plotapp)getParent();     int dx=5000/pq.norm;     int dy=(pq.top*10+300)/pq.norm;     checkplane=new Checkbox("Draw plane",false);//     alwaysredraw=false;     pq.add(checkplane);     checkplane.addItemListener(this);     checkplane.setBounds(dx,dy,1200/pq.norm,150/pq.norm);    }    /**     * Draws Track     *      * @param g Graphics context     * @param xx Longitudes     * @param yy Latitudes     * @param i parameter index     */    public void drawPoints(Graphics g, float xx[], float yy[], int i)    {        // This method is derived from class zoomplot        // to do: code goes here               if((prevq!=0)&&(q.mapstatus!=prevq)){         prevq=q.mapstatus;         readmap(mapdata);         drawBackground(g);         setDatamaxmin(maprange[2]/100,maprange[0]/100,                     maprange[3]/100,maprange[1]/100);       }          g.setColor(colors[colours[i-1]]);       if(oldplane!=null){              g.setXORMode(Color.white);              drawSome(g,oldplane[0],oldplane[1],-1,12);              g.setPaintMode();              oldplane=null;       }       g.setPaintMode();       drawSome(g,xx,yy,symbols[i-1]);       if(dodrawplane){              oldplane=drawplane(xx[xx.length-1],yy[yy.length-1],q.status[1]);              g.setXORMode(Color.white);              drawSome(g,oldplane[0],oldplane[1],-1,12);              g.setPaintMode();       }                  }    /**     * Draws map background     *      * @param g Graphics context     */                                                                                                                                                                                                                                                   public int[][] drawplane(float lon,float lat,float hdg){        int[][] planec=new int[2][12];        Dimension dpos=convert(lon,lat);        float coshead=(float)(Math.cos((hdg-90)*Math.PI/180)*2);        float sinhead=(float)(Math.sin((hdg-90)*Math.PI/180)*2);        for(int i=0;i<12;i++){          planec[0][i]=dpos.width+(int)(sinhead*planeshape[i][0]+coshead*planeshape[i][1]);           planec[1][i]=dpos.height-(int)(coshead*planeshape[i][0]-sinhead*planeshape[i][1]);         }        //drawSome(g,planec[0],planec[1],-1,12);        return planec;    }    public void drawBackground(Graphics g)    {        // This method is derived from class zoomplot        // to do: code goes here        oldplane=null;        g.setPaintMode();        g.setFont(new Font("SansSerif",Font.BOLD,fontSize));        float[] lats;        float[] lons;        g.setColor(Color.cyan);        float ql=(ymax+ymin)/2;        for(float l=-180;l<365;l+=10){            StringBuffer sb=new StringBuffer().append((int)l);            drawString(g,l,ql,sb.toString());            drawLine(g,l,ymin,l,ymax);}        ql=(xmax+xmin)/2;        for(float l=-90;l<95;l+=10){            StringBuffer sb=new StringBuffer().append((int)l);            drawString(g,ql,l,sb.toString());            drawLine(g,xmin,l,xmax,l);}        g.setColor(Color.green);        int n=bitsofLand.size();        for(int f=0;f<n;f++){           country c=(country)bitsofLand.elementAt(f);           lats=c.getLats();           lons=c.getLongs();           drawPolyline(g,lats,lons);        }     }   /**    * Reads in Map dataset    *     * @param mapdata String with name of map dataset    */       public void readmap (String mapdata){        System.out.println("read map");         bitsofLand=new Vector();          try{            URL mapurl=new URL(mapdata);            DataInputStream mapdat=new DataInputStream(mapurl.openStream());            boolean reading=true;            try{                maprange[0]=(float)mapdat.readShort();                maprange[1]=(float)mapdat.readShort();                maprange[2]=(float)mapdat.readShort();                maprange[3]=(float)mapdat.readShort();            }catch(IOException ioe){reading=false;}            while(reading){            try{            short np=mapdat.readShort();            short[] lats=new short[np];            short[] lons=new short[np];            for(short i=0;i<np;i++){                lats[i]=mapdat.readShort();                lons[i]=mapdat.readShort();            }            country c=new country(lats,lons);            bitsofLand.addElement(c);            }catch(IOException ioe){                reading=false;                mapdat.close();            }            }        }catch(Exception e){}                        }        //{{DECLARE_CONTROLS        //}}	public void print(Graphics g){//	    if(checkplane!=null)checkplane.setVisible(false);	    super.print(g);	}	public void paint(Graphics g){//	    if(checkplane!=null)checkplane.setVisible(true);	    super.paint(g);	}		public void itemStateChanged(java.awt.event.ItemEvent event){	  dodrawplane=checkplane.getState();//	  repaint();	}}