import java.io.*;import java.net.*;import java.util.*;import java.applet.*;/** * Sets up a connection to a server on Horace. *  * @author Dave Tiddeman * @version 1 */public class horconn {private Socket conn;private InputStream is;private OutputStream os;private BufferedOutputStream bos;public DataInputStream reader;public DataOutputStream writer;private boolean b;private String host;private int port;   /**    * Set up connection to Horace    *     * @param hos Host name    * @param por Port number    * @exception java.io.IOException Failed connection    */   horconn(String hos,int por) throws IOException{      host=hos;      port=por;      connect();   }   /**    * Set up connection to horace    *     * @param port Port number    * @exception java.io.IOException Failed connection    */       horconn(Applet app) throws IOException{            host=app.getParameter("host");      if(host==null){        host=app.getCodeBase().getHost();        if(host.length()==0)host="condor";      }      String por=app.getParameter("port");      if(por!=null){        port=Integer.parseInt(por);      }else{        port=1500;      }      connect();   }               horconn(int port) throws IOException{      this("horace",port);   }   /**    * Set up connection to Horace    *     * @exception java.io.IOException Failed connection    */   horconn() throws IOException{      this((int)1500);   }   /**    * Make connection    *     * @exception java.io.IOException Failed connection    */   private void connect() throws IOException{         conn = new Socket(host, port);      conn.setSoTimeout(0);      is = conn.getInputStream();      os = conn.getOutputStream();      reader = new DataInputStream(is);      bos=new BufferedOutputStream(os,256);      writer = new DataOutputStream(bos);   }   /**    * Write string to Horace    *     * @param st String    * @exception java.io.IOException Connection dropped    */      public void writeString(String st) throws IOException{    writer.writeBytes(st);   }      public void writechar(char c) throws IOException{    writer.writeByte((byte)c);    writer.flush();   }         public int readint() throws IOException{     return reader.readInt();   }      public short readshort() throws IOException{     return reader.readShort();   }      /**    * Read string from Horace    *     * @exception java.io.IOException Connection dropped    */      public String readString(int n) throws IOException{    String st=new String();    for(int i=0;i<n;i++){        st+=(char)reader.readByte();    }    return st;   }      public char[] readchars(int n) throws IOException{    char[] st=new char[n];    for(int i=0;i<n;i++){        st[i]=(char)reader.readByte();    }    return st;   }      public char readchar() throws IOException{    return (char)reader.readByte();   }   /**    * Write integer to Horace    *     * @param i Integer    * @exception java.io.IOException Connection dropped    */      public void writeint(int i) throws IOException{    writer.writeInt(i);//    writer.flush();   }   /**    * Flush output    *     * @exception java.io.IOException Connection dropped    */        public void flush() throws IOException{    writer.flush();   }        /**    * Close connection    *     * @exception java.io.IOException Connection dropped    */       public void close(){    synchronized(this){        try{       is.close();       os.close();       conn.close();        }catch(IOException ioe){            System.out.println(ioe);}       conn=null;    }   }   }