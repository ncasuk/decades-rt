import java.awt.*;import java.awt.Graphics;import java.util.*;import java.io.*;/** * Plot X Y graph *  * @author Dave Tiddeman * @version 1 */public class xyplot extends zoomplot implements java.awt.event.ItemListener{       private int scalewidth=50;   private int plotx,ploty;   public boolean scrollingtime=false;   public boolean independentx=true;   Checkbox checkscroll;    /**     * Create an X,Y plot with particular maximums and minimums     *      * @param xmx Maximum X     * @param xmn Minimum X     * @param ymx Maximum Y     * @param ymn Minimum Y     */       xyplot(float xmx,float xmn,float ymx,float ymn){        super(xmx,xmn,ymx,ymn);    		//{{INIT_CONTROLS		setSize(0,0);		//}}	}    /**     * Create an X,Y plot     */    xyplot(){        super(36000,0,100,0);    }   /**    * Create an X,Y plot    *     * @param ps Plot size    */      xyplot(boolean indepx){        this();        independentx=indepx;   }   /**    * Start plot    */      public void init(){    Dimension d=getSize();    plotx=d.width-scalewidth;    ploty=d.height-scalewidth;    setBackground(Color.white);    setPlotBounds(scalewidth,0,plotx,ploty);    float t1=1000;        if(independentx){          setmaxmin(q.max0,q.min0,q.max1,q.min1);          if((int)((dataset)(q.data.elementAt(0))).number==515){            plotapp pq=(plotapp)getParent();            System.out.println(pq);//            pq.addscrollcheck();            int dx=5000/pq.norm;            int dy=(pq.top*10+300)/pq.norm;            checkscroll=new Checkbox("scroll time",true);            scrollingtime=true;            alwaysredraw=true;            pq.add(checkscroll);            checkscroll.addItemListener(this);            checkscroll.setBounds(dx,dy,1200/pq.norm,150/pq.norm);          }        }else{          setmaxmin(q.max1,q.min1,q.max0,q.min0);        }       }   /**    * Draw the background    *     * @param g Graphics context    */      public void drawBackground(Graphics g){    g.setFont(new Font("SansSerif",Font.BOLD,fontSize));       int i1=1;        int i2=0;        float d0=q.max0-q.min0;        float d1=q.max1-q.min1;        float max0=q.max0+d0/10;        float max1=q.max1+d1/10;        float min0=q.min0-d0/10;        float min1=q.min1-d1/10;        if(independentx){            i1=0;            i2=1;    setDatamaxmin(max0,min0,max1,min1);        }else{    setDatamaxmin(max1,min1,max0,min0);        }//    setDatamaxmin(q.maxs[i1],q.mins[i1],q.maxs[i2],q.mins[i2]);    Dimension d=getSize();    plotx=d.width-scalewidth;    ploty=d.height-scalewidth;    setPlotBounds(scalewidth,0,plotx,ploty);    g.setPaintMode();    g.setColor(Color.black);    StringBuffer sb;    g.setClip(0,0,scalewidth,ploty+10);    Vector v=getTickmarks(ymin,ymax);    int iy=v.size()/2;    for(int i=0;i<v.size();i++){        tickmark t=(tickmark)v.elementAt(i);        d=convert(0,t.value);        g.drawString(t.name,5,d.height);        if(i==iy){g.drawString(getunits(i2),2,d.height+15);}    }      g.setClip(scalewidth,0,plotx,ploty);   g.setColor(Color.lightGray);   for(int i=0;i<v.size();i++){        tickmark t=(tickmark)v.elementAt(i);        d=convert(0,t.value);        g.drawLine(scalewidth,d.height,plotx+scalewidth,d.height);    }    double dd=(double)((ymax-ymin)/10);    double qr=choosetick(dd,10,4,40,2,2);    double m1=qr*(Math.floor(ymin/qr));    g.setColor(Color.black);    while((float)m1<ymax){        d=convert(0,(float)m1);        g.drawLine(scalewidth,d.height,scalewidth+5,d.height);                m1+=qr;    }    g.setClip(scalewidth-10,ploty,10+plotx,scalewidth);    if((independentx)&(q.getparam(0)==515)){        v=getTimemarks(xmin,xmax);    }else{        v=getTickmarks(xmin,xmax);    }    for(int i=0;i<v.size();i++){        tickmark t=(tickmark)v.elementAt(i);        d=convert(t.value,0);        g.drawString(t.name,d.width,ploty+15);    }   g.drawString(getunits(i1),plotx/2,ploty+30);   g.setClip(scalewidth,0,plotx,ploty);   g.setColor(Color.lightGray);   for(int i=0;i<v.size();i++){        tickmark t=(tickmark)v.elementAt(i);        d=convert(t.value,0);        g.drawLine(d.width,0,d.width,ploty);    }    dd=(double)((xmax-xmin)/10);    if((independentx)&(q.getparam(0)==515)){        qr=choosetick(dd,60,4,8,4,5);    }else{        qr=choosetick(dd,10,4,40,2,2);    }    m1=qr*(Math.floor(xmin/qr));    g.setColor(Color.black);    while((float)m1<xmax){        d=convert((float)m1,0);        g.drawLine(d.width,ploty-5,d.width,ploty);                m1+=qr;    }    g.drawLine(scalewidth,0,scalewidth,ploty);    g.drawLine(scalewidth,ploty-1,scalewidth+plotx,ploty-1);      }   /**    * Draw the lines    *     * @param g Graphics context    * @param xx X coordinates    * @param yy Y coordinates    * @param i Index    */   public void drawPoints(Graphics g,float[]xx,float[] yy,int i){    g.setClip(scalewidth,0,plotx,ploty);    g.setColor(colors[colours[i-1]]);    if((q.delt!=0)&&(i==1)&&scrollingtime){        xmax=xmax+q.delt;        xmin=xmin+q.delt;        q.delt=0;    }    if(independentx){        drawSome(g,xx,yy,symbols[i-1]);    }else{        drawSome(g,yy,xx,symbols[i-1]);    }   }   /**    * Calcualte where to put tick marks    *     * @param min Minimum    * @param max Maximum    * @return Vector of tick marks    */      public Vector getTickmarks(float min,float max){    double d=max-min;    Vector ans=new Vector();    double qr=choosetick(d,10,4,40,2,2);    double m1=qr*(Math.floor(min/qr));    while((float)m1<max){        ans.addElement(new tickmark((float)m1,false));        m1+=qr;    }    return ans;   }   /**    * Calculate where to put time marks    *     * @param min Minimum time    * @param max Maximum time    * @return Vector of tick marks    */   public Vector getTimemarks(float min,float max){    double d=max-min;    if(d>2){    Vector ans=new Vector();    double qr=choosetick(d,60,4,8,4,5);    double m1=qr*(Math.floor(min/qr));    while((float)m1<max){        ans.addElement(new tickmark((float)m1,true));        m1+=qr;    }    return ans;    }else{        return getTickmarks(min,max);    }   }   /**    * Choose tick spacing    *     * @param d Difference    * @param base Base    * @param min Minimum    * @param max Maximum    * @param x1 X1    * @param x2 X2    * @return Tick spacing    */   private double choosetick(double d,double base,double min,double max,double x1,double x2){    double dq=Math.log(d);    dq=dq/Math.log(base);    double qr=Math.floor(dq);    qr=Math.pow(base,(int)qr);    if((d/qr)<min)qr/=x1;    if((d/qr)>max)qr*=x2;    return qr;   }	//{{DECLARE_CONTROLS	//}}		public void print(Graphics g){	    if(checkscroll!=null)checkscroll.setVisible(false);	    super.print(g);	}	public void paint(Graphics g){	    if(checkscroll!=null)checkscroll.setVisible(true);	    super.paint(g);	}		public void itemStateChanged(java.awt.event.ItemEvent event){	  scrollingtime=checkscroll.getState();	  alwaysredraw=scrollingtime;	}}